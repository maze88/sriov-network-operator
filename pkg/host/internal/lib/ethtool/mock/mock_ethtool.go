// Code generated by MockGen. DO NOT EDIT.
// Source: ethtool.go
//
// Generated by this command:
//
//	mockgen -destination mock/mock_ethtool.go -source ethtool.go
//

// Package mock_ethtool is a generated GoMock package.
package mock_ethtool

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockEthtoolLib is a mock of EthtoolLib interface.
type MockEthtoolLib struct {
	ctrl     *gomock.Controller
	recorder *MockEthtoolLibMockRecorder
	isgomock struct{}
}

// MockEthtoolLibMockRecorder is the mock recorder for MockEthtoolLib.
type MockEthtoolLibMockRecorder struct {
	mock *MockEthtoolLib
}

// NewMockEthtoolLib creates a new mock instance.
func NewMockEthtoolLib(ctrl *gomock.Controller) *MockEthtoolLib {
	mock := &MockEthtoolLib{ctrl: ctrl}
	mock.recorder = &MockEthtoolLibMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEthtoolLib) EXPECT() *MockEthtoolLibMockRecorder {
	return m.recorder
}

// Change mocks base method.
func (m *MockEthtoolLib) Change(ifaceName string, config map[string]bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Change", ifaceName, config)
	ret0, _ := ret[0].(error)
	return ret0
}

// Change indicates an expected call of Change.
func (mr *MockEthtoolLibMockRecorder) Change(ifaceName, config any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Change", reflect.TypeOf((*MockEthtoolLib)(nil).Change), ifaceName, config)
}

// FeatureNames mocks base method.
func (m *MockEthtoolLib) FeatureNames(ifaceName string) (map[string]uint, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FeatureNames", ifaceName)
	ret0, _ := ret[0].(map[string]uint)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FeatureNames indicates an expected call of FeatureNames.
func (mr *MockEthtoolLibMockRecorder) FeatureNames(ifaceName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FeatureNames", reflect.TypeOf((*MockEthtoolLib)(nil).FeatureNames), ifaceName)
}

// Features mocks base method.
func (m *MockEthtoolLib) Features(ifaceName string) (map[string]bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Features", ifaceName)
	ret0, _ := ret[0].(map[string]bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Features indicates an expected call of Features.
func (mr *MockEthtoolLibMockRecorder) Features(ifaceName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Features", reflect.TypeOf((*MockEthtoolLib)(nil).Features), ifaceName)
}
